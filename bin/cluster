#!/usr/bin/env bash
# A convenience script for simplifying the process of creating or destroying
# numerous kubernetes clusters across cloud providers. For demonstration
# purposes only--not real world infrastructure management.
set -euo pipefail
SCRIPT_PATH="$(cd "$(dirname "$BASH_SOURCE[0]")"; pwd -P)"

# ensure terraform exits gracefully if consumer presses ctrl+c
function graceful-exit {
  kill -SIGINT "$tfpid"
  wait $tfpid
}
trap 'graceful-exit' SIGINT

function usage {
  echo "Usage: $0 <up|down> <team-env-provider-region>"
  exit 1
}

if test "$#" -ne 2; then
    usage
fi

if [[ ("$1" != "up" && "$1" != "down") || -z "$2" ]]; then
    usage
fi

IFS='-' read -r -a params <<< "$2"

if [[ "${#params[@]}" != 4 ]]; then
  echo "Please provide a valid cluster name (e.g. team-dev-aws-us)."
  exit 1
fi

CLUSTER_PATH="infrastructure/${params[0]}-${params[1]}/${params[2]}/${params[3]}"
if [[ ! -d "${SCRIPT_PATH}/../${CLUSTER_PATH}" ]]; then
  echo "No cluster found in ${CLUSTER_PATH}."
  exit 1
fi

echo "[$2]: Spinning $1..."
cd "${SCRIPT_PATH}/../${CLUSTER_PATH}"
if [[ $1 == "up" ]]; then
  workspaces=("network" "cluster" "cluster-config" "routing")
  command="apply"
fi
if [[ $1 == "down" ]]; then
  workspaces=("cluster-config" "routing" "cluster" "network")
  command="destroy"
fi

for workspace in "${workspaces[@]}"; do
  (
    cd ${workspace}
    terraform init
    terraform ${command} -auto-approve
  ) 2>&1 | sed "/^$/!s/^/\[$2\/${workspace}\]: /" &
  tfpid=$!
  # -n ensures the loop stops if there are failures in the subshell
  wait -n
done