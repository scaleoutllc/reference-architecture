#!/usr/bin/env bash
# A convenience script for simplifying the process of creating or destroying
# numerous kubernetes clusters across cloud providers. For launchnstration
# purposes only--not real world infrastructure management.
set -euo pipefail
SCRIPT_PATH="$(cd "$(dirname "$BASH_SOURCE[0]")"; pwd -P)"

# ensure terraform exits gracefully if consumer presses ctrl+c
function graceful-exit {
  kill -SIGINT "$tfpid"
  wait $tfpid
}
trap 'graceful-exit' SIGINT

function usage {
  echo "Usage: $0 <up|down> <team-env-provider-region>"
  exit 1
}

if test "$#" -ne 2; then
    usage
fi

if [[ ("$1" != "validate" && "$1" != "up" && "$1" != "down") || -z "$2" ]]; then
    usage
fi

IFS='-' read -r -a params <<< "$2"

if [[ "${#params[@]}" != 4 ]]; then
  echo "Please provide a valid cluster name (e.g. fast-dev-aws-us)."
  exit 1
fi

REL_ENV_PATH="infrastructure/environments/${params[0]}-${params[1]}/${params[2]}/${params[3]}"
ABS_ENV_PATH="${SCRIPT_PATH}/../${REL_ENV_PATH}"
if [[ ! -d "${ABS_ENV_PATH}" ]]; then
  echo "No cluster found in ${REL_ENV_PATH}."
  exit 1
fi

echo "[$2]: Spinning $1..."
cd "${ABS_ENV_PATH}"
if [[ -f "${ABS_ENV_PATH}/.env" ]]; then
  export $(cat .env | xargs)
fi

if [[ $1 == "validate" || "$1" == "up" ]]; then
  workspaces=(
    "network"
    "tls"
    "cluster/(eks|oke|gke)"
    "cluster/nodes"
    "cluster/namespaces/kube-system"
    "cluster/namespaces/autoneg-system"
    "cluster/namespaces/istio-system"
    "cluster/namespaces/ingress"
    "cluster/namespaces/hello-world"
  )
  if [[ $1 == "validate" ]]; then
    command="terraform init && terraform validate"
  fi
  if [[ $1 == "up" ]]; then
    command="terraform init && terraform apply -auto-approve"
  fi
fi

if [[ $1 == "down" ]]; then
  workspaces=(
    "cluster/namespaces/hello-world"
    "cluster/namespaces/ingress"
    "cluster/namespaces/istio-system"
    "cluster/namespaces/autoneg-system"
    "cluster/namespaces/kube-system"
    "cluster/nodes"
    "cluster/(eks|oke|gke)"
    "tls"
    "network"
  )
  command="terraform init && terraform destroy -auto-approve"
fi

for workspace in "${workspaces[@]}"; do
  selected=$(find * -maxdepth 2 -type d | (grep -E "${workspace}"||true) | head -n1)
  if [[ -d ${selected} ]]; then
    (
      cd $selected
      bash -c "$command"
    ) 2>&1 | sed "s@^@\[$2/${selected}\]: @" &
    tfpid=$!
    # -n ensures the loop stops if there are failures in the subshell
    wait -n
  fi
done