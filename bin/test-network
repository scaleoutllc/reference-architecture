#!/bin/bash
# Convenience script for testing VPC network connectivity within and between
# cloud providers.
set -euo pipefail
SCRIPT_PATH="$(cd "$(dirname "$BASH_SOURCE[0]")"; pwd -P)"

TEST_PATH="${SCRIPT_PATH}/../environments/shared/dev/multi-cloud/testing"

function endlessRemote {
  $1 "bash -c 'sudo apt-get update && sudo apt-get install netcat-openbsd -y && while true; do results=\$($2); echo \"\$results\"; done'"
}

echo "Gathering network configuration..."
terraform -chdir="${TEST_PATH}" init 2>&1 > /dev/null
terraform -chdir="${TEST_PATH}" refresh 2>&1 > /dev/null
envs=($(terraform -chdir="${TEST_PATH}" output -raw envs))
mapfile -t ssh < <(terraform -chdir="${TEST_PATH}" output -raw ssh)
ips=($(terraform -chdir="${TEST_PATH}" output -raw ips))
echo "Done."

echo "Repeatedly testing connectivity until manually exited..."
# Iterate over all environments.
for envIdx in "${!envs[@]}"; do
  # Initialize a variable to hold all network connectivity test commands.
  tests=""
  # Iterate over all private ips for all environments.
  for ipIdx in "${!ips[@]}"; do
    # Skip testing connection to self.
    if [[ "$envIdx" != "$ipIdx" ]]; then
      # Print the source and destination environments.
      tests+="printf \"\033[0;34m${envs[$envIdx]}->${envs[$ipIdx]}:\033[0m \";"
      # Test SSH comms between source and destination debug vms using netcat.
      tests+="nc -zv -w1 ${ips[$ipIdx]} 22 2>&1 | GREP_COLORS=\"mt=01;32\" grep --color=always -E \"succeeded|$\" | GREP_COLORS=\"mt=01;31\" grep --color=always -E \"timed out|$\";"
    fi
  done
  endlessRemote "${ssh[$envIdx]}" "${tests}" &
done
wait

